#!/usr/bin/python3
"""Script for RSA Factoring Challenge.

This script reads an RSA number from a file and factorizes it into two prime
numbers. The factorization is done using Pollard's rho algorithm.

Example:
    $ python3 rsa.py rsa_number.txt
"""

import sys
import math
import time


def is_prime(number):
    """Check if a number is prime.

    Args:
        n (int): The number to check.

    Returns:
        bool: True if the number is prime, False otherwise.
    """
    if number <= 1 or (number % 2 == 0 and number > 2):
        return False
    return all(number % i for i in range(3, int(math.sqrt(number)) + 1, 2))


def pollards_rho(number_to_factorize, start_time):
    """Implements Pollard's rho algorithm for factorization.

    This function implements Pollard's rho algorithm to factorize a given
    number. If the number is even, it immediately returns 2. Otherwise, it
    uses Pollard's rho algorithm to find a nontrivial factor.

    Args:
        number_to_factorize (int): The number to factorize.
        start_time (float): The time when the script started running.

    Returns:
        int: A factor of `number_to_factorize`.

    Raises:
        SystemExit: If the processing time exceeds 5 seconds.
    """
    if number_to_factorize % 2 == 0:
        return 2
    x_value = 2
    y_value = 2
    gcd_value = 1
    factorize_func = lambda x: (x**2 + 1) % number_to_factorize
    while gcd_value == 1:
        if time.time() - start_time > 5:
            sys.exit(1)
        x_value = factorize_func(x_value)
        y_value = factorize_func(factorize_func(y_value))
        gcd_value = math.gcd(abs(x_value-y_value), number_to_factorize)
    return gcd_value


def factorize(number, start_time):
    """Factorizes a number and prints the result.

    This function factorizes a given number into a product of two smaller
    numbers and prints the result in the format 'n=p*q'.

    Args:
        number (int): The number to factorize.
        start_time (float): The time when the script started running.
    """
    p_value = pollards_rho(number, start_time)
    while not is_prime(p_value):
        p_value = pollards_rho(p_value, start_time)
    q_value = number // p_value
    print("{}={}*{}".format(number, q_value, p_value))


def read_number_from_file(file_path):
    """Reads a number from a file.

    This function reads a number from a file. The number is expected
    to be on a separate line. The function returns the number.

    Args:
        file_path (str): The path to the file.

    Returns:
        int: The number read from the file.

    Raises:
        FileNotFoundError: If the file does not exist.
        ValueError: If the file contains non-integer values.
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            number = int(file.readline().strip())
            if number > 1:
                return number
            else:
                print("Error: Number must be greater than 1")
                sys.exit(1)
    except FileNotFoundError:
        print("Error opening file")
        sys.exit(1)
    except ValueError:
        print("Error: File contains non-integer values")
        sys.exit(1)


def main():
    """Main function.

    This function is the entry point of the script. It reads command line
    arguments, reads a number from a file, and factorizes the number.
    """
    if len(sys.argv) != 2:
        print("Usage: rsa <file>")
        sys.exit(1)
    number = read_number_from_file(sys.argv[1])
    start_time = time.time()
    factorize(number, start_time)


if __name__ == "__main__":
    main()
